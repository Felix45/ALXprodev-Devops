#!/bin/bash

# List of Pokémon (all lowercase for API compatibility)
pokemon_list=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")
output_dir="pokemon_data"
max_retries=3
timeout_secs=10
mkdir -p "$output_dir"
touch errors.txt

# Trap to kill background jobs on Ctrl+C
trap "echo -e '\n⚠️ Interrupted. Killing all fetch processes...'; kill 0; exit 1" SIGINT

# Function to fetch Pokémon with retry and timeout logic
fetch_pokemon() {
    local pokemon=$1
    local attempt=1

    echo "Fetching data for $pokemon..."

    while [ $attempt -le $max_retries ]; do
        # Use timeout to limit how long curl can take
        http_code=$(timeout "$timeout_secs" curl -s -w "%{http_code}" -o "$output_dir/${pokemon}.json" "https://pokeapi.co/api/v2/pokemon/$pokemon")

        if [ "$http_code" == "200" ]; then
            echo "Saved data to $output_dir/${pokemon}.json ✅"
            return 0
        else
            echo "Attempt $attempt failed for $pokemon (status: $http_code or timeout)"
            ((attempt++))
            sleep 2
        fi
    done

    echo "❌ Failed to fetch $pokemon after $max_retries attempts." | tee -a errors.txt
    rm -f "$output_dir/${pokemon}.json"
}

# Loop through Pokémon list and launch fetches in background
for pokemon in "${pokemon_list[@]}"; do
    fetch_pokemon "$pokemon" &
done

# Wait for all background jobs
wait

echo "✅ All Pokémon fetch processes complete."
